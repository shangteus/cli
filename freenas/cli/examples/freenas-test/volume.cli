# Test runner for volume  category
#

# State variables shared between create and destroy functions.
_snap_obj=null
_snap_name="_snappysnap"
_dataset_name="_test_dataset"
_volume_hard_count = 10
_volume_hard_dset_arr = []
_volume_hard_snap_arr = []

function volume_create() {
	print(">>> Starting volume tests")

	VOL_OBJECT = @$(volume create name=${VOL_NAME} disks=auto layout=stripe)
	maybe_barf(_success, "+volume#1", "Unable to create volume " + VOL_NAME)
	@$(VOL_OBJECT scrub)
	maybe_barf(_success, "+volume#2", "Scrub of volume " + VOL_NAME + " failed")
	@$(VOL_OBJECT upgrade)
	maybe_barf(_success, "+volume#3", "Upgrade of volume " + VOL_NAME + " failed")
	_x=$(VOL_OBJECT get size)
	maybe_barf(_success, "+volume#4", "Unable to get size for volume " + VOL_NAME)
	maybe_barf(_x > 0, "+volume#5", "Insane size reported for " + VOL_NAME)

	SYS_DATASET_VOL = $(system system_dataset get volume)
	maybe_barf(_success, "+volume#6", "Unable to get current system dataset volume")
	print(">>> Volume: FYI: System dataset was on " + SYS_DATASET_VOL)
	@$(system system_dataset set volume=${VOL_NAME})
	if (not (maybe_barf(_success, "+volume#7", "Unable to set system dataset volume"))) {
	    print(">>> Volume: FYI: System dataset now on " + VOL_NAME)
	}

	@$(VOL_OBJECT dataset create name=${VOL_NAME + "/" + _dataset_name})
	maybe_barf(_success, "+volume#8", "Unable to create dataset " + _dataset_name)

	@$(VOL_OBJECT dataset ${VOL_NAME + "/" + _dataset_name} set name=${VOL_NAME + "/" + _dataset_name + "_mod"})
	maybe_barf(_success, "+volume#9", "Unable to rename dataset " + _dataset_name)

	_dataset_obj = $(VOL_OBJECT dataset show | find name==${VOL_NAME + "/" + _dataset_name + "_mod"})
	maybe_barf(_success, "+volume#10", "Unable to find renamed dataset for volume " + VOL_NAME + " named " + _dataset_name)

	_snap_obj = @$(VOL_OBJECT snapshot create dataset=${VOL_NAME} name=${VOL_NAME + "@" + _snap_name})
	maybe_barf(_success, "+volume#11", "Unable to create snapshot for volume " + VOL_NAME + " named " + _snap_name)
	_x = $(VOL_OBJECT snapshot show | find name==${VOL_NAME + "@" + _snap_name})
	maybe_barf(_success, "+volume#12", "Unable to find created snapshot for volume " + VOL_NAME + " named " + _snap_name)
	maybe_barf(_x == $(_snap_obj get name), "+volume11", "Snapshot names do not agree: " + _x + " and " + $(_snap_obj get name))

	_x = $(VOL_OBJECT get guid)
	maybe_barf(_success, "+volume13", "Unable to get guid for volume " + VOL_NAME)
}

function volume_destroy() {
	print(">>> Finishing volume tests")
	@$(_snap_obj delete)
	maybe_barf(_success, "-volume#1", "Unable to delete snapshot " + _snap_name + " from volume " + VOL_NAME)
	@$(volume ${VOL_NAME} dataset ${VOL_NAME + "/" + _dataset_name + "_mod"} delete)
	maybe_barf(_success, "-volume#2", "Unable to delete dataset " + _dataset_name)
	@$(system system_dataset set volume=${SYS_DATASET_VOL})
	print(">>> Volume: FYI: System dataset back on " + SYS_DATASET_VOL)
	maybe_barf(_success, "-volume#3", "Unable to restore system dataset setting")

	@$(VOL_OBJECT delete)
	maybe_barf(_success, "-volume#3", "Unable to delete volume " + VOL_NAME)
}

function volume_hard_create() {
	print(">>> Starting volume stress tests: " + str(_volume_hard_count) + " datasets and snapshots")
	for (i = 0; i < _volume_hard_count; i = i + 1) {
	    _x = @$(VOL_OBJECT dataset create name=${VOL_NAME + "/" + _dataset_name + "-" + str(i)})
	    if (not (maybe_barf(_success, "+volume-hard#1", "Unable to create dataset #" + str(i)))) {
	    	append(_volume_hard_dset_arr, _x)
	    }
	}
	_l = count_by_name("volume " + VOL_NAME + " dataset", _dataset_name + "-[0-9]*")
	maybe_barf(_l == _volume_hard_count, "+volume-hard#2", "Dataset count of " + str(_l) + " does not match " + str(_volume_hard_count))

	for (i = 0; i < _volume_hard_count; i = i + 1) {
	    _x = @$(VOL_OBJECT snapshot create dataset=${VOL_NAME} recursive=yes name=${VOL_NAME + "@" + _snap_name + "-" + str(i)})
	    if (not (maybe_barf(_success, "+volume-hard#2", "Unable to create snapshot #" + str(i)))) {
	    	append(_volume_hard_snap_arr, _x)
	    }
	}
	_l = count_by_name("volume " + VOL_NAME + " snapshot", VOL_NAME + "@" + _snap_name + "-[0-9]*")
	maybe_barf(_l == _volume_hard_count, "+volume-hard#3", "Snapshot count of " + str(_l) + " does not match " + str(_volume_hard_count))
}

function volume_hard_destroy() {
	for (i in _volume_hard_dset_arr) {
	    _n = $(i get name)
	    @$(i delete)
	    maybe_barf(_success, "-volume-hard#1", "Unable to delete dataset " + _n)
	}
	_l = count_by_name("volume " + VOL_NAME + " dataset", _dataset_name + "-" + "[0-9]*")
	maybe_barf(_l == 0, "-volume-hard#2", "Unable to delete all datasets: " + str(_l) + " remaining.")

	for (i in _volume_hard_snap_arr) {
	    _n = $(i get name)
	    @$(i delete recursive=yes)
	    maybe_barf(_success, "-account-hard#2", "Unable to delete snapshot " + _n)
	}
	_l = count_by_name("volume " + VOL_NAME + " snapshot", VOL_NAME + "@" + _snap_name + "-" + "[0-9]*")
	maybe_barf(_l == 0, "-volume-hard#3", "Unable to delete all snapshots: " + str(_l) + " remaining.")
}
